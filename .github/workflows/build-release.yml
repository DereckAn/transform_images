name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libraw-dev \
            liblcms2-dev \
            libjpeg-dev

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cd src-tauri && cargo test --lib --verbose

  build-tauri:
    name: Build Tauri App
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel
          - platform: macos-13
            target: x86_64-apple-darwin
            args: --target x86_64-apple-darwin

          # macOS Apple Silicon
          - platform: macos-14
            target: aarch64-apple-darwin
            args: --target aarch64-apple-darwin

          # Windows
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            args: ''

          # Linux
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            args: ''

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # macOS dependencies
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install libraw little-cms2 jpeg-turbo

      # Windows dependencies
      - name: Install Windows dependencies
        if: runner.os == 'Windows'
        run: |
          echo "Windows build configuration pending"
          # TODO: Configure LibRaw for Windows

      # Linux dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libraw-dev \
            liblcms2-dev \
            libjpeg-dev

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Transform Images v__VERSION__'
          releaseBody: |
            ## Transform Images ${{ github.ref_name }}

            Professional image transformation and optimization tool with RAW format support.

            ### Features
            - üñºÔ∏è RAW format support (Sony, Canon, Nikon, etc.)
            - ‚ö° Batch processing with multithreading
            - üé® Advanced transformations (resize, rotate, flip)
            - üóúÔ∏è Smart optimization (JPEG, PNG, WebP)
            - üßπ Automatic metadata removal

            ### Downloads
            Choose the appropriate version for your platform:
            - **macOS Intel**: `.dmg` (x86_64)
            - **macOS Apple Silicon**: `.dmg` (aarch64)
            - **Windows**: `.msi` or `.exe`
            - **Linux**: `.AppImage` or `.deb`
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  build-cli:
    name: Build CLI Binary
    needs: test
    strategy:
      matrix:
        include:
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: transform-images-macos-intel

          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: transform-images-macos-apple-silicon

          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact_name: transform-images-linux

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: transform-images-windows.exe

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: brew install libraw little-cms2 jpeg-turbo

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libraw-dev liblcms2-dev libjpeg-dev

      - name: Build CLI binary
        run: |
          cd src-tauri
          cargo build --release --bin transform-images --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          tar -czf ${{ matrix.artifact_name }}.tar.gz transform-images
          mv ${{ matrix.artifact_name }}.tar.gz ../../../../

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          7z a ${{ matrix.artifact_name }}.zip transform-images.exe
          move ${{ matrix.artifact_name }}.zip ../../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            *.tar.gz
            *.zip
